'''
Purpose: Functions to be accessed by the Personal Vulnerability Scanner application.
Version: 1.0 April 2023
Author:  Adam Livingston, University of Arizona
'''
import os
import sys
import re
# Radio button lists
ACTIVITY = [
    ("Public", 1), 
    ("Friends", 2),
    ("Friends Except...", 3),
    ("Specific Friends", 4),
    ("Only me", 5),
    ("I don't know", 0)
]
ACTIVITY2 = [
    ("Public", 1), 
    ("Friends", 2),
    ("Friends Except...", 3),
    ("Specific Friends", 4),
    ("Only me", 5),
    ("I don't know", 0)
]
ACTIVITY3 = [
    ("Public", 1), 
    ("Friends", 2),
    ("Friends Except...", 3),
    ("Specific Friends", 4),
    ("Only me", 5),
    ("I don't know", 0)
]

SEND_REQS = [
    ("Friends of friends", 1),
    ("Everyone", 2),
    ("I don't know", 0)
]

CAN_LOOKUP = [
    ("Friends of friends", 1), 
    ("Friends", 2),
    ("Everyone", 3),
    ("Only me", 4),
    ("I don't know", 0)
]
CAN_LOOKUP2 = [
    ("Friends of friends", 1), 
    ("Friends", 2),
    ("Everyone", 3),
    ("Only me", 4),
    ("I don't know", 0)
]

YES_NO = [
    ("Yes", 2),
    ("No", 1),
    ("I don't know", 0)
]
YES_NO2 = [
    ("Yes", 2),
    ("No", 1),
    ("I don't know", 0)
]
YES_NO3 = [
    ("Yes", 2),
    ("No", 1),
    ("I don't know", 0)
]
YES_NO4 = [
    ("Yes", 2),
    ("No", 1),
    ("I don't know", 0)
]
YES_NO5 = [
    ("Yes", 2),
    ("No", 1),
    ("I don't know", 0)
]
YES_NO6 = [
    ("Yes", 2),
    ("No", 1),
    ("I don't know", 0)
]
YES_NO7 = [
    ("Yes", 2),
    ("No", 1),
    ("I don't know", 0)
]
YES_NO8 = [
    ("Yes", 2),
    ("No", 1),
    ("I don't know", 0)
]

MESSAGE_REQS = [
    ("Chats", 1), 
    ("Message Requests", 2),
    ("Don’t receive requests", 3),
    ("I don't know", 0)
]
MESSAGE_REQS2 = [
    ("Chats", 1), 
    ("Message Requests", 2),
    ("Don’t receive requests", 3),
    ("I don't know", 0)
]
MESSAGE_REQS3 = [
    ("Chats", 1), 
    ("Message Requests", 2),
    ("Don’t receive requests", 3),
    ("I don't know", 0)
]
MESSAGE_REQS4 = [
    ("Chats", 1), 
    ("Message Requests", 2),
    ("Don’t receive requests", 3),
    ("I don't know", 0)
]

OTHER_MSG_REQS = [
    ("Message Requests", 1),
    ("Don’t receive requests", 2),
    ("I don't know", 0)
]
OTHER_MSG_REQS2 = [
    ("Message Requests", 1),
    ("Don’t receive requests", 2),
    ("I don't know", 0)
]


MONTHS = {"January": "01",
          "February": "02", 
          "March": "03", 
          "April": "04", 
          "May": "05", 
          "June": "06", 
          "July": "07",
          "August": "08", 
          "September": "09", 
          "October": "10", 
          "November": "11", 
          "December": "12"
          }

familyRelationships = ['brother', 'mother', 'father', 'daughter', 'son', 'sister', 'aunt', 'uncle', 'cousin', 'niece', 'nephew', 'sibling', 'parent', 'pet', 'child', 'in-law', 'add family member', 'more', 'gender']

fbEdList = []
fbEdListComplete = []
livedDict = {}
importantYears = []
importantLocs = []
fbFamMembers = []

def FindBirthday(basicString):
    birthday = ""   #February 2, 1990
    bDayMonth = ""
    bDayDay = ""
    bDayYear = ""
    theLine = ""
    findMonth = ""
    for eachChar in basicString:
        if eachChar != "\n":
            theLine += eachChar
        else:
            foundSpace = False
            foundBirthday = False
            for eachChar2 in theLine:
                if foundSpace == False:
                    if eachChar2 != " ":
                        findMonth += eachChar2
                    else:
                        foundSpace = True
            for key, value in MONTHS.items():
                if findMonth == key:
                    birthday = theLine
                    foundBirthday = True
            if foundBirthday == False:
                theLine = ""
                findMonth = ""
            
            continue
    
    i = 0
    for eachChar in birthday:
        if eachChar == ",":
            continue
        if eachChar == " ":
            i += 1    
        if eachChar != " ":
            if i < 1:
                bDayMonth += eachChar
            if i == 1:
                for key, value in MONTHS.items():
                    if key == bDayMonth:
                        bDayMonth = value
                        i += 1
                        continue
            if i == 2:
                bDayDay += eachChar
            
            if i == 3:
                bDayYear += eachChar
    
    if len(bDayDay) == 1:
        bDayDay = "0" + bDayDay
    birthday = bDayDay + bDayMonth + bDayYear
    return birthday

def GetFirstLastName(fbName):
    firstName = ""
    lastName = ""
    i = 0
    fNameFound = False
    for eachEntry in fbName:
        if eachEntry != " ":
            if fNameFound == False:
                firstName += eachEntry
                i += 1
            else:
                lastName += eachEntry
        else:
            fNameFound = True
            lastName += eachEntry
            i += 1
    
    lastName = lastName[1:]
    print(firstName.lower())
    print(lastName.lower())
    return firstName.lower(), lastName.lower()

def GetCompanyName(basicString):
    stringToFind = "Started New Job at"
    company = ""   #February 2, 1990
    theLine = ""
    saveLine = ""
    companyFound = False
    
    for eachChar in basicString:
        if eachChar != "\n":
            theLine += eachChar
            if theLine == stringToFind:
                saveLine = theLine
                companyFound = True
            elif companyFound == True: 
                if saveLine == stringToFind:
                    company += eachChar
        else:
            theLine = ""
            companyFound = False
            
    company = company.lower()
    company = company[1:]
    return company

def GatherSchoolData(fbEd):
    for key, value in fbEd.items():
        ParseSchools(key)
        ParseSchools(value)
        
    fbEdListComplete = GetSchoolInitials(fbEdList)
    return fbEdListComplete

def ParseSchools(keyOrVal):
    if keyOrVal.lower() == "more options":
        return
    if keyOrVal.lower() == "add high school":
        return
    if keyOrVal.lower() == "add college":
        return
    if keyOrVal.lower() == "add college":
        return
    if keyOrVal.lower() == "college":
        return
    if keyOrVal.lower() == "high school":
        return    
    else:
        fbEdList.append(keyOrVal)
        return


# Gets initials of Schools and place in List
def GetSchoolInitials(fbEdL):
    newSchool = ""
    retEd = []
    buffer = []
    edListLen = len(fbEdL)
    for eachEntry in fbEdL:
        if edListLen == 0:
            break
        else:
            retEd.append(eachEntry)
            newSchool = [s[0] for s in eachEntry.split()]
            #returns ['E', 'H']
            buffer = ''.join(newSchool)
            retEd.append(buffer)
            edListLen -= 1
    return retEd

def ParseLocations(fbPlLived):
    numPlacesLived = len(fbPlLived)   # length is 2...list of dicts
    i = 0
    while i < numPlacesLived:
        livedDict = fbPlLived[i]
        for key, value in livedDict.items():
            ParseLocations2(key, value)
        i += 1    
    
    return importantLocs, importantYears

def ParseLocations2(key, value):        
    if key == "text":
        tempVal = re.sub(",","",value)
        tempVal = tempVal.split()
        for eachLoc in tempVal:
            importantLocs.append(eachLoc)
        return
    
    if key == "type":
        tempVal = re.sub("Moved in ","",value)
        match = re.match(r'.*([1-3][0-9]{3})', tempVal)
        if match is not None:
            importantYears.append(tempVal)
        return
        
    else:
        return

def GatherFamilyNames(fbFamily):
    out = []
    buffer = []
    for eachChar in fbFamily:
        if eachChar == '\n':
            out.append(''.join(buffer))
            buffer = []
        else:
            buffer.append(eachChar)
    else:
        if buffer:
            out.append(''.join(buffer))

    out = set(out)
    out = list(out)

    # remove the relationship
    for eachRel in familyRelationships:
        out = [x for x in out if eachRel not in x]

    #out = [x for x in out if x not in familyRelationships]

    # Place the family into a new list.
    newFam = []
    for eachName in out:
        temp = []
        temp = eachName.split()
        newFam += temp

    # Convert the new list into a set and make it the fbFamMembers variable.
    newFam = set(newFam)
    fbFamMembers = sorted(list(newFam))     
    return fbFamMembers

def ParseOtherWords(fbEdListComplete, importantLocs, importantYears, fbFamMembers):
    importantWords = ""
    if len(fbEdListComplete) > 1:
        for eachWord in fbEdListComplete:
            importantWords += str(eachWord)
            importantWords += ","
            
    if len(importantLocs) > 1:
        for eachWord in importantLocs:
            importantWords += str(eachWord)
            importantWords += ","
            
    if len(importantYears) > 1:
        for eachWord in importantYears:
            importantWords += str(eachWord)
            importantWords += ","
            
    if len(fbFamMembers) > 1:
        for eachWord in fbFamMembers:
            importantWords += str(eachWord)
            importantWords += ","        
    
    with open("./Passwords/Common_Passwords.txt", "r") as common:
        for eachline in common:
            cleaned_line = eachline.strip()
            importantWords += str(cleaned_line)
            importantWords += ","
    
    return importantWords

def PasswordGenerator():
    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
    numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']
    
    print(random.randint(0,1))
    
    pw_letters = int(input("How many letters would you like in your password?\n"))
    pw_symbols = int(input("How many symbols would you like in your password?\n"))
    pw_numbers = int(input("How many numbers would you like in your password?\n"))
    
    pw_len = pw_letters + pw_symbols + pw_numbers
    
    password = ""
    password_list = []

    
    for let in range (1, pw_letters + 1):
        password_list.append(random.choice(letters))
        
    for sym in range (1, pw_symbols + 1):
        password_list.append(random.choice(symbols))
        
    for num in range (1, pw_numbers + 1):
        password_list.append(random.choice(numbers))
    
    # Convert it back into a string!
    for eachChar in password_list:
        password += eachChar
        
    print(f"Your password is: {password}")