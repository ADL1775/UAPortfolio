'''
Title:   Personal Vulnerability Scanner
Version: 1.0 April 2023
Author:  Adam Livingston, University of Arizona
'''
import os
import sys
import requests
import webbrowser
import cupp_project as cupp

from tkinter import *
from tkinter import filedialog
from facebook_scraper import get_profile    #https://pypi.org/project/facebook-scraper/
                                            #pip install facebook-scraper
from PIL import ImageTk, Image
import config as main_cfg                   # Configuration file to assist with clean code


'''
#import browser_cookie3      # Automatically gets cookies from browser

#import datetime
#import html5lib
#from urllib import request
#import cookielib
# import selenium     # Selenium allows us to interact with HTML elements from a website. Documentation: https://selenium-python.readthedocs.io/

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
'''


#familyRelationships = ['brother', 'mother', 'father', 'daughter', 'son', 'sister', 'aunt', 'uncle', 'cousin', 'niece', 'nephew', 'sibling', 'parent', 'pet', 'child', 'in-law', 'add family member', 'more', 'gender']
unique_list_finished = []
background_image = "./Images/Background.jpg"
icon_image = "./Images/securityIcon.ico"
fbname_image = "./Images/FBNameExample.jpg"

# HaveIBeenPwned API URL and Key
API_URL = 'https://haveibeenpwned.com/api/v3/breachedaccount/{}'
api_key = "6e3fe915bf124662a7624640b158a5d3" 

buttonValDict = {"futurePosts": 0,
                 "canSeePplYouFollow": 0,
                 "sendFrReqs": 0,
                 "seeFrList": 0,
                 "lookupEmail": 0,
                 "lookupPhone": 0,
                 "searchEngine": 0,
                 "phoneReqs": 0,
                 "frOfFrReqs": 0,
                 "instagramReqs": 0,
                 "instaFolReqs": 0,
                 "othersFbReqs": 0,
                 "othersInstaReqs": 0,
                 "haveCell": 0,
                 "cellTrack": 0,
                 "cellLock": 0,
                 "cellBt": 0,
                 "cellWiFi": 0,
                 "cellBank": 0,
                 "cellPwMgr": 0}

includePwBool = False
includeAsmtBool = False
nothingCheckBool = False

# WINDOW MANAGEMENT
def close_window(window):
    # Destroy the new window
    window.destroy()

    # Bring the root window back up
    root.deiconify()

def close_program():
    # Destroy the root window
    root.destroy()

'''#############################################################'''
'''#############################################################'''
''' HAVEIBEENPWNED Functions '''
# function to search Google for a given breach
def search_breach(breach_name):
    webbrowser.open_new_tab('https://www.google.com/search?q={}+breach'.format(breach_name))

# function to get the breached sites for a given email address or phone number
def get_breached_sites(email_or_phone):
    headers = {'hibp-api-key': api_key}
    response = requests.get(API_URL.format(email_or_phone), headers=headers)
    if response.status_code == 200:
        return response.json()
    elif response.status_code == 404:
        return None
    else:
        messagebox.showerror('Error', 'An error occurred while retrieving the breached sites.')
        return None
    
# function to display the breached sites in the GUI
def display_breached_sites(email_or_phone, result_frame, result_label):    
    
    #email_or_phone = email_or_phone_entry.get().strip()
    breached_sites = get_breached_sites(email_or_phone)
    if breached_sites is None:
        messagebox.showinfo('Info', 'No breached sites were found for the given email or phone number.')
        return
    result_frame.pack_forget()
    result_frame.pack(fill=BOTH, expand=True)
    result_label.config(text='You were affected by the following breaches:')
    canvas_frame = Canvas(result_frame)    
    
    check = len(result_frame.winfo_children())
    
    if len(result_frame.winfo_children()) > 1:
        for widget in result_frame.winfo_children():
            widget.destroy()

    for i, site in enumerate(breached_sites):        
        breach_name = site['Name']
        button_text = 'Search Google for {}'.format(breach_name + " breach")
        breach_label = Label(result_frame, text='{}. {}'.format(i+1, breach_name))
        breach_button = Button(result_frame, text=button_text, command=lambda name=breach_name: search_breach(name))
        breach_label.pack(anchor=W)
        breach_button.pack(anchor=W)
        result_frame.update()

def HaveIBeenPwned_Window():
    root.withdraw()  
    pwned_window = Toplevel()
    pwned_window.title('Have I Been Pwned?')
    pwned_window.geometry("800x300")
    pwned_window.iconbitmap(icon_image)
    pwned_title_label = Label(pwned_window, text='HaveIBeenPwned?', font=('Courier', 30))
    pwned_title_label.pack(pady=10)
    
    # Create an exit button on the new window
    exit_button = Button(pwned_window, text="<<Back to Main Page", relief=RAISED, command=lambda: close_window(pwned_window)).pack(side=BOTTOM, anchor=SW, padx=5, pady=5)
    
    email_or_phone_label = Label(pwned_window, text='Enter your email or phone number: ')
    email_or_phone_entry = Entry(pwned_window, width=40)
    email_or_phone_label.pack(side=LEFT)
    email_or_phone_entry.pack(side=LEFT)
    
    # create the frame to display the breached sites
    result_frame = Frame(pwned_window, borderwidth=2, highlightthickness=0, relief="groove")
    result_label = Label(result_frame)
    result_label.pack()
    
    # create the check button widget
    search_button = Button(pwned_window, text='Search', command=lambda: display_breached_sites(email_or_phone_entry.get().strip(), result_frame, result_label))
    search_button.pack(side=LEFT)
    
''' HAVEIBEENPWNED Functions END'''
'''#############################################################'''
'''#############################################################'''
def openImage(imageName):
    imageWindow = Toplevel()
    #global display_image
    global img_for_label
    display_image = Image.open(imageName)
    imageWidth, imageHeight = display_image.size
    img_for_label = ImageTk.PhotoImage(display_image)
    label_img = Label(imageWindow, image=img_for_label).pack()
    imageWindow.geometry(f"{imageWidth + 50}x{imageHeight + 50}")
    imageWindow.iconbitmap(icon_image)
    closeWindow = Button(imageWindow, text="Close", command=imageWindow.destroy).pack(side=BOTTOM, anchor=SW, padx=5, pady=5)
    return

def FacebookScanner():
    # Hide the root window
    root.withdraw()
    # Create the new window
    global fb_window
    fb_window = Toplevel()
    
    # Set the title of the new window
    fb_window.title("Scan your Facebook Page")
    fb_window.geometry("800x600")
    fb_window.iconbitmap(icon_image)
    
    infoTextPrimary = 'Welcome to your Facebook Vulnerability Scanner!'
    infoTextPrimary2 = 'This scans your Facebook page in order to find if you put too much information online.'
    infoText = 'For this to work, please open a browser and log into your Facebook page.'
    infoText2 = 'This scanner uses your browser cookies to scrape the data.'
    # Create a label on the new window
    label = Label(fb_window, text="Scan your Facebook Page", font=("Courier", 30))
    labelInfo = Label(fb_window, text="Note: This will take a few seconds.", font=("Courier", 16))
    
    fb_name_label = Label(fb_window, text='What is your Facebook username?')
    fb_name_entry = Entry(fb_window, width=40)
    scan_button = Button(fb_window, text='Scan!', command=lambda: FacebookScannerpt2(fb_window, fb_name_entry))
    
    # Create an exit button on the new window
    exit_button = Button(fb_window, text="<<Back to Main Page", relief=RAISED, command=lambda: close_window(fb_window)).pack(side=BOTTOM, anchor=SW, padx=5, pady=5)
    
    username_button = Button(fb_window, text="Where to find my username", relief=RAISED, command=lambda: openImage(fbname_image)).pack(side=BOTTOM, anchor=SW, padx=5, pady=5)
    
    label.pack(pady=10)
    labelInfo.pack()
    Label(fb_window, text=infoText).pack(anchor=W, padx=5)
    Label(fb_window, text=infoText2).pack(anchor=W, padx=5)
    fb_name_label.pack(side=LEFT)
    fb_name_entry.pack(side=LEFT)
    scan_button.pack(side=LEFT, padx=5)
    # Position the exit button on the new window
    #exit_button.pack(pady=10)
    
    # Position the label on the new window
    

def FacebookScannerpt2(fb_window, fb_name_entry):
    # Clear the window
    global inputUN
    inputUN = fb_name_entry.get()
    
    inputUN = inputUN.strip()     # strip the spaces out of the name
    
    # Clear the original widgets.
    for widget in fb_window.winfo_children():
        widget.destroy()
    
    fbCanvas = Canvas(fb_window)
    fbCanvas.pack(side=LEFT, fill=BOTH, expand=True)   

        
    exit_button = Button(fb_window, text="<<Back to Main Page", relief=RAISED, command=lambda: close_window(fb_window)).pack(side=BOTTOM, anchor=SW, padx=5, pady=5)
    finish_button = Button(fb_window, text="Finish my assessment!>>", command=lambda: finishAssessment(fb_window,
                                                                                                       includePw.get(),
                                                                                                       includeAsmt.get(),
                                                                                                       nothingCheck.get(),
                                                                                                       seeFutPosts.get(),
                                                                                                       canSeePplYouFollow.get(),
                                                                                                       sendFrReqs.get(),
                                                                                                       seeFrList.get(),
                                                                                                       lookupEmail.get(),
                                                                                                       lookupPhone.get(),
                                                                                                       searchEngine.get(),
                                                                                                       phoneReqs.get(),
                                                                                                       frOfFrReqs.get(),
                                                                                                       instagramReqs.get(),
                                                                                                       instaFolReqs.get(),
                                                                                                       othersFbReqs.get(),
                                                                                                       othersInstaReqs.get(),
                                                                                                       haveCell.get(),
                                                                                                       cellTrack.get(),
                                                                                                       cellLock.get(),
                                                                                                       cellBt.get(),
                                                                                                       cellWiFi.get(),
                                                                                                       cellBank.get(),
                                                                                                       cellPwMgr.get(),
                                                                                                       unique_list_finished)).pack(side=BOTTOM, anchor=SW, padx=5, pady=5)
    dataParsed = False
    
    fbName = ""
    fbWork = ""
    fbEd = {}
    fbPlLived = []    
    fbContact = ""    
    editPlaceholder = ""
    fbBasicInfo = ""
    fbBirthday = ""
    editPlaceholder2 = ""
    fbPronunc = ""
    fbOtherName = ""
    fbRelationship = ""
    fbFamily = ""
    fbAbout = ""
    fbLifeEvent = ""
    fbQuotes = ""
    
    ''' IMPORTANT DATA STORAGE '''
    aboutData = {}
    
    fbEdList = []
    fbEdListComplete = []
    importantLocs = []
    importantYears = []
    importantNames = []
    fbFamMembers = []
    
    try:
        bulkData = get_profile(inputUN, cookies = "from_browser")
        dataParsed = True
        
        # Iterate through the testing dictionary and store in a new
        for key, value in bulkData.items():
            aboutData[key] = value
    
        i = 0
        for key, value in aboutData.items():
            if key == "Name":
                fbName = value
            if key == "Work":
                fbWork = value
            if key == "Education":
                fbEd = value
                fbEdListComplete = main_cfg.GatherSchoolData(fbEd)
            if key == "Places lived":
                fbPlLived = value
                importantLocs, importantYears = main_cfg.ParseLocations(fbPlLived)
            if key == "Contact info\nEdit":
                fbContact = value
            if key == "Edit" and i < 1:
                editPlaceholder = value
                i += 1
            if key == "Basic info\nEdit" or key == "Basic info":
                fbBasicInfo = value
                fbBirthday = main_cfg.FindBirthday(fbBasicInfo)
            if key == "Edit":
                editPlaceholder2 = value
            if key == "Name Pronunciation":
                fbPronunc = value
            if key == "Other names":
                fbOtherName = value
            if key == "Relationship":
                fbRelationship = value
            if key == "Family members":
                fbFamily = value.lower()
                fbFamMembers = main_cfg.GatherFamilyNames(fbFamily)
            if key == "About":
                fbAbout = value
            if key == "Life events":
                fbLifeEvent = value
            if key == "Favorite quotes\nEdit":
                fbQuotes = value
            else:
                continue 
        
        successLabel = Label(fb_window, text="Your profile was found and the data was parsed!").pack(side=TOP, anchor=NW, padx=5, pady=5)
        importantWords = main_cfg.ParseOtherWords(fbEdListComplete, importantLocs, importantYears, fbFamMembers)
        #testing.profile.2023
        #adam.livingston.393950
        #testing.profile.2023
        
        # Run the data through CUPP
        unique_list_finished = cupp.interactive(fbName, fbBirthday, importantWords, fbLifeEvent)
    
    except Exception as err:
        print(err)
    
    fbFrame = Frame(fbCanvas)
    
    includePw = IntVar()
    includeAsmt = IntVar()
    nothingCheck = IntVar()
    
    
    if dataParsed == False:
        errorLabel = Label(fbFrame, text="Looks like that profile could not be found or an error occurred with your browser settings.").pack(side=TOP, anchor=NW, padx=5, pady=5)
        

    Label(fbFrame, text='When you click "Finish Assessment", what would you like included in the output file?').pack(side=TOP, anchor=NW, padx=5)
    Label(fbFrame, text='(Note: This is bugged and is in progress. Default output will include both.').pack(side=TOP, anchor=NW, padx=5)
    checkPw = Checkbutton(fbFrame, text="Passwords an attacker might guess you have.", variable=includePw).pack(side=TOP, anchor=NW, padx=5)
    checkAsmt = Checkbutton(fbFrame, text="An assessment based on the output below.", variable=includeAsmt).pack(side=TOP, anchor=NW, padx=5)
    checkNothing = Checkbutton(fbFrame, text="No output.", variable=nothingCheck).pack(side=TOP, anchor=NW, padx=5)
    print(type(checkPw))
    #checkNothing.conifg(command=lambda: checkTheBox(checkNothing, checkPw, checkAsmt))
 
    
    titleLabel = Label(fbFrame, text="Almost done!", font=(12)).pack(side=TOP, anchor=NW, padx=5, pady=5)
    titleLabel2 = Label(fbFrame, text="Let's do a quick security assessment!", font=(12)).pack(side=TOP, anchor=NW, padx=5)
    titleLabel3 = Label(fbFrame, text="\nIf you don't know where to find these settings, click the 'Help' button below.").pack(side=TOP, anchor=NW, padx=5)
    titleLabelX = Label(fbFrame, text='\nTo view your settings, follow these steps:.').pack(anchor=W)
    titleLabel4 = Label(fbFrame, text="    1.) On your Facebook account’s default page, click on your profile picture in the upper-right-hand corner.").pack(anchor=W)
    titleLabel5 = Label(fbFrame, text='    2.) Click on "Settings & privacy".  Then click on "settings".').pack(anchor=W)
    titleLabel6 = Label(fbFrame, text='    3.) On the right-hand side of your screen, click on "Privacy".\n').pack(anchor=W)
    

    yourActivityLabel = Label(fbFrame, text="\nYour Activity", font=(10)).pack(anchor=W)
    seeFutPostsLabel = Label(fbFrame, text="Who can see your future posts?").pack(anchor=W)
    seeFutPosts = IntVar()
    seeFutPosts.set(0)
    for text, value in main_cfg.ACTIVITY:
        Radiobutton(fbFrame, text=text, variable=seeFutPosts, value=value).pack(anchor=W)
    
    canSeePplYouFollowLabel = Label(fbFrame, text="Who can see the people, Pages and lists you follow?").pack(anchor=W)
    canSeePplYouFollow = IntVar()
    canSeePplYouFollow.set(0)     
    for text, value in main_cfg.ACTIVITY2:
        Radiobutton(fbFrame, text=text, variable=canSeePplYouFollow, value=value).pack(anchor=W)    
    
    contactLabel = Label(fbFrame, text="\nHow people find and contact you", font=(10)).pack(anchor=W)
    sendFrReqsLabel = Label(fbFrame, text="Who can send you friend requests?").pack(anchor=W)
    sendFrReqs = IntVar()
    sendFrReqs.set(0)     
    for text, value in main_cfg.SEND_REQS:
        Radiobutton(fbFrame, text=text, variable=sendFrReqs, value=value).pack(anchor=W)
    
    seeFrListLabel = Label(fbFrame, text="Who can see your friends list?").pack(anchor=W)
    seeFrList = IntVar()
    seeFrList.set(0)     
    for text, value in main_cfg.ACTIVITY3:
        Radiobutton(fbFrame, text=text, variable=seeFrList, value=value).pack(anchor=W)    
    
    
    lookupEmailLabel = Label(fbFrame, text="Who can look you up using the email address you provided?").pack(anchor=W)
    lookupEmail = IntVar()
    lookupEmail.set(0)
    for text, value in main_cfg.CAN_LOOKUP:
        Radiobutton(fbFrame, text=text, variable=lookupEmail, value=value).pack(anchor=W)       
    
    lookupPhoneLabel = Label(fbFrame, text="Who can look you up using the phone number you provided?").pack(anchor=W)
    lookupPhone = IntVar()
    lookupPhone.set(0)     
    for text, value in main_cfg.CAN_LOOKUP2:
        Radiobutton(fbFrame, text=text, variable=lookupPhone, value=value).pack(anchor=W)       
    

    searchEngineLabel = Label(fbFrame, text="Do you want search engines outside of Facebook to link to your profile?").pack(anchor=W)
    searchEngine = IntVar()
    searchEngine.set(0)     
    for text, value in main_cfg.YES_NO:
        Radiobutton(fbFrame, text=text, variable=searchEngine, value=value).pack(anchor=W)       
    

    msgReqLabel = Label(fbFrame, text="\nHow you get message requests", font=(10)).pack(anchor=W)
    phoneReqsLabel = Label(fbFrame, text="For people with your phone number, deliver requests to:").pack(anchor=W)
    phoneReqs = IntVar()
    phoneReqs.set(0)     
    for text, value in main_cfg.MESSAGE_REQS:
        Radiobutton(fbFrame, text=text, variable=phoneReqs, value=value).pack(anchor=W)       
    
    
    frOfFrReqsLabel = Label(fbFrame, text="For friends of friends on Facebook, deliver requests to:").pack(anchor=W)
    frOfFrReqs = IntVar()
    frOfFrReqs.set(0)     
    for text, value in main_cfg.MESSAGE_REQS2:
        Radiobutton(fbFrame, text=text, variable=frOfFrReqs, value=value).pack(anchor=W)       
    
    
    instagramReqsLabel = Label(fbFrame, text="For accounts you follow or have chatted with on Instagram, deliver requests to:").pack(anchor=W)
    instagramReqs = IntVar()
    instagramReqs.set(0)     
    for text, value in main_cfg.MESSAGE_REQS3:
        Radiobutton(fbFrame, text=text, variable=instagramReqs, value=value).pack(anchor=W)       
    
    
    instaFolReqsLabel = Label(fbFrame, text="For your followers on Instagram, deliver requests to:").pack(anchor=W)
    instaFolReqs = IntVar()
    instaFolReqs.set(0)     
    for text, value in main_cfg.MESSAGE_REQS4:
        Radiobutton(fbFrame, text=text, variable=instaFolReqs, value=value).pack(anchor=W)       

    othersFbReqsLabel = Label(fbFrame, text="For others on Facebook, deliver requests to:").pack(anchor=W)
    othersFbReqs = IntVar()
    othersFbReqs.set(0)     
    for text, value in main_cfg.OTHER_MSG_REQS:
        Radiobutton(fbFrame, text=text, variable=othersFbReqs, value=value).pack(anchor=W)       
    
    
    othersInstaReqsLabel = Label(fbFrame, text="For others on Instagram, deliver requests to:").pack(anchor=W)
    othersInstaReqs = IntVar()
    othersInstaReqs.set(0) 
    for text, value in main_cfg.OTHER_MSG_REQS2:
        Radiobutton(fbFrame, text=text, variable=othersInstaReqs, value=value).pack(anchor=W)       
    
    
    cellSecLabel = Label(fbFrame, text="\nCell Phone Security:", font=(12)).pack(anchor=W)
    haveCellLabel = Label(fbFrame, text="Do you have a cell phone?").pack(anchor=W)
    haveCell = IntVar()
    haveCell.set(0)     
    for text, value in main_cfg.YES_NO2:
        Radiobutton(fbFrame, text=text, variable=haveCell, value=value).pack(anchor=W)       

    cellTrackLabel = Label(fbFrame, text="Do you use any tracking features to find your lost device\n(i.e., “Find my iPhone”)?").pack(anchor=W)
    cellTrack = IntVar()
    cellTrack.set(0)     
    for text, value in main_cfg.YES_NO3:
        Radiobutton(fbFrame, text=text, variable=cellTrack, value=value).pack(anchor=W)       
    
    
    cellLockLabel = Label(fbFrame, text="Do you keep your phone locked with a PIN, password,\n facial recognition, pattern recognition, etc.?").pack(anchor=W)
    cellLock = IntVar()
    cellLock.set(0)     
    for text, value in main_cfg.YES_NO4:
        Radiobutton(fbFrame, text=text, variable=cellLock, value=value).pack(anchor=W)       
    

    cellBtLabel = Label(fbFrame, text="Do you keep Bluetooth on in public spaces when not using it?").pack(anchor=W)
    cellBt = IntVar()
    cellBt.set(0)     
    for text, value in main_cfg.YES_NO5:
        Radiobutton(fbFrame, text=text, variable=cellBt, value=value).pack(anchor=W)       
    
    
    cellWiFiLabel = Label(fbFrame, text="Do you ever connect to public Wi-Fi networks?").pack(anchor=W)
    cellWiFi = IntVar()
    cellWiFi.set(0)     
    for text, value in main_cfg.YES_NO6:
        Radiobutton(fbFrame, text=text, variable=cellWiFi, value=value).pack(anchor=W)       
    
    
    cellPwMgrLabel = Label(fbFrame, text="Do you use a password manager on your phone (i.e., Last Pass)? ").pack(anchor=W)
    cellPwMgr = IntVar()
    cellPwMgr.set(0)     
    for text, value in main_cfg.YES_NO7:
        Radiobutton(fbFrame, text=text, variable=cellPwMgr, value=value).pack(anchor=W)       
    
    
    cellBankLabel = Label(fbFrame, text="Do you do banking on your phone?").pack(anchor=W)
    cellBank = IntVar()
    cellBank.set(0) 
    for text, value in main_cfg.YES_NO8:
        Radiobutton(fbFrame, text=text, variable=cellBank, value=value).pack(anchor=W)
    
    scrollbar = Scrollbar(fb_window, orient="vertical", command=fbCanvas.yview)
    fbCanvas.configure(yscrollcommand=scrollbar.set)
    scrollbar.pack(side=RIGHT, fill="y")
    fbCanvas.create_window((0, 0), window=fbFrame, anchor=NW)
    fbFrame.bind("<Configure>", lambda event, canvas=fbCanvas: fbCanvas.configure(scrollregion=fbCanvas.bbox("all")))
    
    # Bind the mouse wheel to the scrollbar
    fbCanvas.bind("<MouseWheel>", lambda event, scrollbar=scrollbar: scrollbar.yview_scroll(-1*(event.delta//120), "units"))
    
    fb_window.mainloop()

def finishAssessment(fb_window,
                     includePw,
                     includeAsmt,
                     nothingCheck,                     
                     value1,
                     value2,
                     value3,
                     value4,
                     value5,
                     value6,
                     value7,
                     value8,
                     value9,
                     value10,
                     value11,
                     value12,
                     value13,
                     value14,
                     value15,
                     value16,
                     value17,
                     value18,
                     value19,
                     value20,
                     unique_list_finished):
    
    # Clear the original widgets.
    for widget in fb_window.winfo_children():
        widget.destroy()
    
    valueList = [value1,
                 value2,
                 value3,
                 value4,
                 value5,
                 value6,
                 value7,
                 value8,
                 value9,
                 value10,
                 value11,
                 value12,
                 value13,
                 value14,
                 value15,
                 value16,
                 value17,
                 value18,
                 value19,
                 value20]
    
    
    i = 0
    for key, value in buttonValDict.items():
        buttonValDict[key] = valueList[i]
        i += 1

    for key, value in buttonValDict.items():
        print(f"{key}: {value}")
    
    notificationText = 'Click the "Save File" button to save a list of possible passwords.\nThese passwords were generated by using the information gathered from\nyour Facebook page and were combined with a list of common passwords.\nNote: This program is still in beta. Future releases will include a full report based off\nof the information gathered from both Facebook and the questions you answered.'
    
    Label(fb_window, text=notificationText).pack(anchor=NW, padx=5, pady=5)
    
    save_button = Button(fb_window, text="Save File", command=lambda: save_file(unique_list_finished)).pack(anchor=NW, padx=5, pady=5)
    exit_button = Button(fb_window, text="<<Back to Main Page", relief=RAISED, command=lambda: close_window(fb_window)).pack(side=BOTTOM, anchor=SW, padx=5, pady=5)
    fb_window.mainloop()
    

def save_file(unique_list_finished):
    file_path = filedialog.asksaveasfilename(initialdir = "./", defaultextension=".txt", title="Where do you want to save your report?")
    #common = open("./Passwords/Common_Passwords.txt", "r")
    
    if file_path:
        reportHeader = open("./ReportHeader.txt", "r")
        common = open("./Passwords/Common_Passwords.txt", "r")
        f = open(file_path, "w")
        f.write(reportHeader.read())
        f.write(common.read())
        unique_list_finished.sort()
        f.write(os.linesep.join(unique_list_finished))
        f.close()  
        common.close()
        reportHeader.close()
            
'''
def checkTheBox(checkNothing, checkPw, checkAsmt):
    if checkNothing.get() == 1:
        #checkPw.deselect()
        checkPw.conifg(state=DISABLED)
        #checkAsmt.deselect()
        checkAsmt.conifg(state=DISABLED)    
    else:
        checkPw.config(state=NORMAL)
        checkAsmt.conifg(state=NORMAL)
'''


def main():
    # Create the root window
    global root
    root = Tk()
    root.title("Personal Vulnerability Scanner")
    # Load the image using the PIL library
    root.iconbitmap(icon_image)
    
    image = Image.open(background_image)
    image = image.resize((800, 600), Image.ANTIALIAS) # Resize the image to fit the window
    background = ImageTk.PhotoImage(image)

    # Set the background image of the root window
    background_label = Label(root, image=background)
    background_label.pack(fill="both", expand=True)
    
    # Set the size of the root window to the size of the image
    root.geometry("%dx%d" % (background.width(), background.height()))       
    
    # Create three buttons on the root window
    button_scrape = Button(root, text="Facebook Profile Vulnerability Scanner", font=("Helvetica", 18), command=FacebookScanner)
    button_pwn = Button(root, text="HaveIBeenPwned?", font=("Helvetica", 18), command=HaveIBeenPwned_Window)
    button_exit = Button(root, text="Close Program", font=("Helvetica", 18), command=close_program)

    # Position the buttons on the root window
    button_scrape.place(x=100, y=100)
    button_pwn.place(x=100, y=200)
    button_exit.place(x=100, y=300)
    
    root.mainloop()
    '''
    fbName = ""
    fbWork = ""
    fbEd = {}
    fbPlLived = []    
    fbContact = ""    
    editPlaceholder = ""
    fbBasicInfo = ""
    editPlaceholder2 = ""
    fbPronunc = ""
    fbOtherName = ""
    fbRelationship = ""
    fbFamily = ""
    fbAbout = ""
    fbLifeEvent = ""
    fbQuotes = ""
    '''
    ''' IMPORTANT DATA STORAGE '''
    '''
    aboutData = {}
    fbEdList = []
    fbEdListComplete = []
    importantLocs = []
    importantYears = []
    importantNames = []
    fbFamMembers = []    
    

    inputUN = str(input("What is your Facebook User Name? "))
    inputUN = inputUN.strip()     # strip the spaces out of the name
    bulkData = get_profile(inputUN, cookies = "from_browser")

    
    # Iterate through the testing dictionary and store in a new
    for key, value in bulkData.items():
        aboutData[key] = value
  
    i = 0
    for key, value in aboutData.items():
        if key == "Name":
            fbName = value.split()
        if key == "Work":
            fbWork = value
        if key == "Education":
            fbEd = value
        if key == "Places lived":
            fbPlLived = value
        if key == "Contact info":
            fbContact = value
        if key == "Edit" and i < 1:
            editPlaceholder = value
            i += 1
        if key == "Basic info":
            fbBasicInfo = value
        if key == "Edit":
            editPlaceholder2 = value
        if key == "Name Pronunciation":
            fbPronunc = value
        if key == "Other names":
            fbOtherName = value
        if key == "Relationship":
            fbRelationship = value
        if key == "Family members":
            fbFamily = value.lower()
        if key == "About":
            fbAbout = value
        if key == "Life events":
            fbLifeEvent = value
        if key == "Favorite quotes\nEdit":
            fbQuotes = value
        else:
            continue
    '''
    #################################################
    ''' Parse Raw Education Data and Get Initials '''
    #################################################
    '''
    #if edDataGathered is True:
    for key, value in fbEd.items():
        ParseSchools(key)
        ParseSchools(value)
    

    fbEdListComplete = GetSchoolInitials(fbEdList)
    '''
    #############################
    ''' Parse Locations Lived '''
    #############################    
    '''
    #if plLivedGathered is True:
    numPlacesLived = len(fbPlLived)   # length is 2...list of dicts
    i = 0
    while i < numPlacesLived:
        livedDict = fbPlLived[i]
        for key, value in livedDict.items():
            ParseLocations(key, value)
        i += 1
    '''
    ######################################
    ''' Gather important family names '''
    ######################################    
    '''
    out = []
    buffer = []
    for eachChar in fbFamily:
        if eachChar == '\n':
            out.append(''.join(buffer))
            buffer = []
        else:
            buffer.append(eachChar)
    else:
        if buffer:
            out.append(''.join(buffer))
    
    out = set(out)
    out = list(out)
    
    # remove the relationship
    for eachRel in familyRelationships:
        out = [x for x in out if eachRel not in x]
    
    #out = [x for x in out if x not in familyRelationships]
    
    # Place the family into a new list.
    newFam = []
    for eachName in out:
        temp = []
        temp = eachName.split()
        newFam += temp
    
    # Convert the new list into a set and make it the fbFamMembers variable.
    newFam = set(newFam)
    fbFamMembers = sorted(list(newFam))
    '''
    ##########################
    ''' Other data parsing '''
    ##########################         
    '''
    # Life events
    #fbLifeEvent
    print("Life event: ", fbLifeEvent)
    
    
    #Relationship
    #fbRelationship
    print("relationship: ", fbRelationship)
    
    #Contact Info
    #fbContact
    print("Contact: ", fbContact)
    
    #Contact info Edit
    #editPlaceholder
    #print("Contact info edit: ", editPlaceholder)
    
    #Other name
    #fbOtherName
    print("Other name: ", fbOtherName)
    
    #Quotes
    #fbQuotes
    print("Quotes: ", fbQuotes)
    
    #Basic Info
    #fbBasicInfo
    #print("Basic info: ", fbBasicInfo)
    
    #Basic Info Edit
    #editPlaceholder2
    #print("Basic info edit: ", editPlaceholder2)
    
    #adam.livingston.393950
    #testing.profile.2023
    '''
    


if __name__ == '__main__':
    
    main()
    print()
    
    
    
'''
# Disable chromedriver alerts
chrome_options = webdriver.ChromeOptions()
prefs = {"profile.default_content_setting_values.notifications" : 2}
chrome_options.add_experimental_option("prefs",prefs)

# Specify path to the chromedriver
chromeDriverPath = ".\chromedriver.exe"
driver = webdriver.Chrome(chromeDriverPath, chrome_options=chrome_options)

# Open the webpage
driver.get("https://www.facebook.com/")


# To get these values, right click on field and slect "inspect"
username = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "input[name = 'email']")))
password = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "input[name = 'pass']")))

# Enter username and password into the web page
username.clear()
username.send_keys(inputUN)
password.clear()
password.send_keys(inputPW)

#target the login button and click it
button = WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type = 'submit']"))).click()


for i in ['about_work_and_education', 'about_places']:
    driver.get(inputURL + i + "/")
    time.sleep(5)

time.sleep(10)

'''

'''
resp = request.urlopen("https://www.facebook.com/adam.livingston.393950/")
#print(dir(resp))
print(f"Resp code: {resp.code}")
#print(resp.length)
data = resp.read()
print("length of 'data': ", len(data))
print("Data type before decode: ", type(data))
html = data.decode("UTF-8")
print("HTML Type: ", type(html))
#print(html)

result = html.find("https://www.facebook.com/")

print("URL found at index: ", result)
newURL = ""
while html[result] != '"':
    #print(html[result])
    newURL += html[result]
    result += 1
print(newURL)


result = html.find("https://www.facebook.com/", result)
print("Next URL found at index: ", result)
newURL = ""
while html[result] != '"':
    #print(html[result])
    newURL += html[result]
    result += 1
print(newURL)

result = html.find("https://www.facebook.com/", 21100)
print("Next URL found at index: ", result)
newURL = ""
while html[result] != '"':
    #print(html[result])
    newURL += html[result]
    result += 1
print(newURL)

result = html.find("https://www.facebook.com/", result)
print("Next URL found at index: ", result)
newURL = ""
while html[result] != '"':
    #print(html[result])
    newURL += html[result]
    result += 1
print(newURL)
'''



'''
chromeDriverPath = ".\chromedriver.exe"
driver = webdriver.Chrome(chromeDriverPath) 

def FacebookScrape(facebookURL):
    driver.get("https://www.facebook.com/")

def ChromeDriver():
    # Disable chromedriver alerts
    chrome_options = webdriver.ChromeOptions()
    prefs = {"profile.default_content_setting_values.notifications" : 2}
    chrome_options.add_experimental_option("prefs",prefs)

    # Specify path to the chromedriver
    chromeDriverPath = ".\chromedriver.exe"
    driver = webdriver.Chrome(chromeDriverPath, chrome_options=chrome_options)
    
    # Open the webpage
    driver.get("https://www.facebook.com/")
'''